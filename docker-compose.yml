version: "3.1"

volumes:
  postgresql_data:
  ldap_data:
  ldap_config:
  geoserver_geodata:
  geoserver_datadir:
  geoserver_tiles:
  geoserver_native_libs:
  mapstore_extensions:
  geonetwork_datadir:
  datafeeder_uploads:
  datafeeder_postgis_data:
  esdata:

secrets:
  slapd_password:
    file: ./secrets/slapd_password.txt
  geoserver_privileged_user_passwd:
    file: ./secrets/geoserver_privileged_user_passwd.txt

services:
  database:
    image: georchestra/database:latest
    environment:
      - POSTGRES_USER=georchestra
      - POSTGRES_PASSWORD=georchestra
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    restart: always

  ldap:
    image: georchestra/ldap:latest
    secrets:
      - slapd_password
      - geoserver_privileged_user_passwd
    environment:
        - SLAPD_ORGANISATION=georchestra
        - SLAPD_DOMAIN=georchestra.org
        - SLAPD_PASSWORD_FILE=/run/secrets/slapd_password
        - SLAPD_PASSWORD=
        - GEOSERVER_PRIVILEGED_USER_PASSWORD_FILE=/run/secrets/geoserver_privileged_user_passwd
        - SLAPD_LOG_LEVEL=32768 # See https://www.openldap.org/doc/admin24/slapdconfig.html#loglevel%20%3Clevel%3E
    volumes:
      - ldap_data:/var/lib/ldap
      - ldap_config:/etc/ldap
    restart: always

  proxy:
    image: georchestra/security-proxy:latest
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f localhost:8080/_static/bootstrap_3.0.0/css/bootstrap-theme.min.css >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      ldap:
        condition: service_healthy
      database:
        condition: service_healthy
    volumes:
      - ./config:/etc/georchestra
    environment:
      - JAVA_OPTIONS=-Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF
      - XMS=256M
      - XMX=1G
    restart: always

  cas:
    image: georchestra/cas:latest
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f localhost:8080/cas/login >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      ldap:
        condition: service_healthy
    volumes:
      - ./config:/etc/georchestra
    environment:
      - JAVA_OPTIONS=-Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF
      - XMS=256M
      - XMX=1G
    restart: always

  header:
    image: georchestra/header:latest
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f localhost:8080/header/img/logo.png >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    volumes:
      - ./config:/etc/georchestra
    environment:
      - JAVA_OPTIONS=-Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF
      - XMS=256M
      - XMX=512M
    restart: always

  geoserver:
    image: georchestra/geoserver:latest
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f localhost:8080/geoserver/gwc/service/wmts?SERVICE=WMTS&REQUEST=GetCapabilities >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      ldap:
        condition: service_healthy
      database:
        condition: service_healthy
    volumes:
      - ./config:/etc/georchestra
      - geoserver_datadir:/mnt/geoserver_datadir
      - geoserver_geodata:/mnt/geoserver_geodata
      - geoserver_tiles:/mnt/geoserver_tiles
      - geoserver_native_libs:/mnt/geoserver_native_libs
    environment:
      - JAVA_OPTIONS=-Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF
      - XMS=256M
      - XMX=8G
    restart: always

  console:
    image: georchestra/console:latest
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f localhost:8080/console/account/new >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      ldap:
        condition: service_healthy
      database:
        condition: service_healthy
    volumes:
      - ./config:/etc/georchestra
    environment:
      - JAVA_OPTIONS=-Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF
      - XMS=256M
      - XMX=1G
    restart: always

  geonetwork:
    image: georchestra/geonetwork:latest
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f localhost:8080/geonetwork/srv/eng/catalog.search >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      console:
        condition: service_healthy
      database:
        condition: service_healthy
      kibana:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./config:/etc/georchestra
      - geonetwork_datadir:/mnt/geonetwork_datadir
    environment:
      - DATA_DIR=/var/lib/geonetwork_data
      - ES_HOST=elasticsearch
      - ES_PROTOCOL=http
      - ES_PORT=9200
      - KB_URL=http://kibana:5601
      - JAVA_OPTIONS=-Duser.home=/tmp/jetty -Dgeorchestra.datadir=/etc/georchestra -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005 -Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF
      - XMS=256M
      - XMX=6G
    restart: always

  datahub:
    image: geonetwork/geonetwork-ui-datahub:latest
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f localhost:80/datahub/ >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    environment:
      ASSETS_DIRECTORY_OVERRIDE: /etc/georchestra/datahub/assets
      CONFIG_DIRECTORY_OVERRIDE: /etc/georchestra/datahub/conf
    volumes:
      - ./config:/etc/georchestra
    restart: always

  analytics:
    image: georchestra/analytics:latest
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f localhost:8080/analytics/ >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./config:/etc/georchestra
    environment:
      - JAVA_OPTIONS=-Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF
      - XMS=256M
      - XMX=1G
    restart: always

  mapstore:
    image: georchestra/mapstore:latest
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f localhost:8080/mapstore/configs/config.json >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      database:
        condition: service_healthy
      ldap:
        condition: service_healthy
    volumes:
      - ./config:/etc/georchestra
      - mapstore_extensions:/mnt/mapstore_extensions
    environment:
      - JAVA_OPTS=-Xms512m -Xmx512m -Dgeorchestra.datadir=/etc/georchestra -Dgeorchestra.extensions=/mnt/mapstore_extensions -DPRINT_BASE_URL=pdf

  postgis:
    # used by datafeeder to ingest uploaded user datasets into
    image: postgis/postgis:13-3.1-alpine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      - POSTGRES_DB=datafeeder
      - POSTGRES_USER=georchestra
      - POSTGRES_PASSWORD=georchestra
    volumes:
      - datafeeder_postgis_data:/var/lib/postgresql/data
    restart: always

  datafeeder:
    image: georchestra/datafeeder:latest
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f localhost:8080/datafeeder >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      database:
        condition: service_healthy
      postgis:
        condition: service_healthy
    volumes:
      - ./config:/etc/georchestra
      - datafeeder_uploads:/tmp/datafeeder
    environment:
      - JAVA_OPTS=-Xms512m -Xmx512m
      # You can set a higher loglevel this way: (ref. https://docs.spring.io/spring-boot/docs/2.1.13.RELEASE/reference/html/boot-features-logging.html#boot-features-custom-log-levels)
      - LOGGING_LEVEL_ORG_GEORCHESTRA_DATAFEEDER=INFO

  import:
    image: georchestra/datafeeder-frontend:latest
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:80/ >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    volumes:
      - ./config:/etc/georchestra

  elasticsearch:
    image: elasticsearch:7.9.0
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f localhost:9200/_cat/health >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m

  kibana:
    image: kibana:7.9.0
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:5601/api/status >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10

    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    volumes:
      - ./resources/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml

  ogc-api-records:
    image: geonetwork/gn-cloud-ogc-api-records-service:4.2.2
    depends_on:
      geonetwork:
        condition: service_healthy
      database:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -f http://localhost:8080/ >/dev/null || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 10
    environment:
      LANG: en_US.UTF-8
      SERVER_SERVLET_CONTEXT_PATH: /ogc-api-records
      SPRING_CONFIG_LOCATION: file:///etc/georchestra/geonetwork/microservices/ogc-api-records/config.yml
      SPRING_PROFILES_ACTIVE: standalone
      JAVA_OPTS: -Dfile.encoding=UTF-8
    volumes:
      - ./config:/etc/georchestra

